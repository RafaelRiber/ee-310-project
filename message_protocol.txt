communication protocol.
From lecture:
int receiveData(char* data_buff, int n);
    − Tries to read n bytes from the socket (if it is correctly opened) and writes
    them into the array data_buff. It returns the number of read bytes
    (dumped to the array data_buff) or -1 if no read was possible.
    − Non-blocking function
void sendData(char* data_buff, int bytes);disconnectFromWiFi();
    − Tries to send n bytes of data from the array data_buff through the
    bidirectional UDP channel. Data is broadcasted and no confirmation is
    delivered by the sender.

note: 
- non-blocking means that it will not wait for data to be present. 
- Game logic expects always expects data. We will have to loop receiveData until it reads
- confirm messages by reading the header. It should be what it expects. 
    - Eg Expecting a send_shot message
- once message is confirmed send ACK.

- error handling: 
    - If no ack within X time. something is very wrong. 
    - simple solution: restart game 
    - complicated: attempt to recover connection?


we have a "server" that relays all messages but it won't do any logic.
its simply a relay. So, we will use one device as a "Master" of the game, and
the other as a "Slave" to establish the game. 


Messages:
request_join
    -msg_id = 0 
send_ships
    -msg_id = 1
send_shot
    -msg_id = 2
ack
    -msg_id = 3

Master:                             | Slave:
---------------------------------------------------------
    wait for request_join           | send request_join
    send ack                        | wait for ack
    send_ships                      | wait for send_ships
    wait for ack                    | send ack
    wait for send_ships             | send_ships
    send ack                        | wait for ack
game loop ---------------------------------------------------------
    send_shot                       | wait for send_shot
    wait for ack                    | send ack
    wait for send_shot              | send_shot 




Master:                             | Slave:
---------------------------------------------------------
                                    | send request_join
    send ack                        | 
    send_ships                      | 
                                    | send ack
                                    | send_ships
    send ack                        | 
game loop ---------------------------------------------------------
    send_shot                       | 
                                    | send ack
                                    | send_shot 

- each nintendo indepdnantly keeps state of game. They simply tell eachother the shot.
- this will make game logic easier. there will be less difference between the Master and slave.
- It also means we do not have to communicate to end the game. It will be done independalty. 
